標準パッケージのみで　　　　　　大量のPNG画像を　　　　　　　　いかに高速に処理するか
Go Conference 2019 Spring
18 May 2019

[[https://twitter.com/cia_rana][CIARANA]]

* 自己紹介

.image face.jpg

*CIARANA*/*Twitter:* *cia_rana*/*GitHub:* *cia-rana*
2019年4月 株式会社サイバーエージェント 新卒入社
[[https://adtech.cyberagent.io/][アドテクスタジオ]]でクリエイタ支援ツール作ってます

* 背景

* 背景
- 動画をフレームごとに処理する必要があった
- 動画→連番PNGに変換してGoで処理した
- めちゃくちゃ処理に時間がかかった

* どうやって処理を早くするか？
- マシンスペックを上げる
- cgo 経由でCのライブラリを呼ぶ
- Goのコードを見直す

* どうやって処理を早くするか？
- マシンスペックを上げる
- cgo 経由でCのライブラリを呼ぶ
- Goのコードを見直す 👈 このプランを採用

* 手あたり次第コードに手を加えても時間のムダ😩

* 推測するな、計測せよ

* Rob Pike, "Notes on Programming in C", 1989
> Rule 1. You can't tell where a program is going to spend its time. Bottlenecks occur in surprising places, so *don't*try*to*second*guess*and*put*in*a*speed*hack*until*you've*proven*that's*where*the*bottleneck*is*.

> Rule 2. *Measure*. Don't tune for speed until you've measured, and even then don't unless one part of the code _overwhelms_ the rest.

* どうやってボトルネックを見つけるか？

* pprof があるじゃない！

* pprof
● Go 公式のプロファイラ
● runtime/pprof

- 関数ごとの実行時間、メモリ情報、goroutineの情報を取得できる

● net/http/pprof

- ビジュアライズして見たい場合はこっちを使う

● github.com/pkg/profile

- pprof の簡易版

* 使用画像
● ここの画像を使わせていただきました
👉 https://github.com/ashleymcnamara/gophers 
● 96枚のPNG画像で全体のサイズは約68MB
.image gophers.png 294 400
“Gopher Artwork” by Ashley McNamara is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

* 実行環境
● OS: Ubuntu 16.04 LTS
● Go: go1.11.2 linux/amd64
● Memory: 2GB
● CPU: Intel Core i5-3340M CPU @ 2.70GHz（使用可能なコア数を1に制限）

* ソースコード1: たたき台

取得したパスにある画像を順にネガポジ反転して保存するシンプルなコード

.code first.go

* ソースコード1の実行時間

 Duration: 2.85mins, Total samples = 157.11s (91.76%)
 Showing nodes accounting for 152.17s, 96.86% of 157.11s total
 Dropped 191 nodes (cum <= 0.79s)
      flat  flat%   sum%        cum   cum%
    23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter
       16s 10.18% 24.88%        28s 17.82%  runtime.mallocgc
    12.89s  8.20% 33.09%     31.27s 19.90%  compress/flate.(*compressor).deflate
     9.85s  6.27% 39.35%      9.85s  6.27%  compress/flate.matchLen
     9.33s  5.94% 45.29%      9.33s  5.94%  runtime.memmove
     8.29s  5.28% 50.57%     43.39s 27.62%  runtime.convT2Inoptr
     5.59s  3.56% 54.13%      5.59s  3.56%  image/png.abs (inline)
     5.23s  3.33% 57.46%     34.02s 21.65%  image.(*NRGBA).Set
     5.04s  3.21% 60.66%     14.89s  9.48%  compress/flate.(*compressor).findMatch
     4.99s  3.18% 63.84%     76.50s 48.69%  main.ProcessImage
     4.53s  2.88% 66.72%      8.50s  5.41%  image/png.paeth
     4.38s  2.79% 69.51%      5.71s  3.63%  image.(*NRGBA).NRGBAAt
     3.85s  2.45% 71.96%     24.39s 15.52%  image/color.nrgbaModel
     3.60s  2.29% 74.25%      3.60s  2.29%  image/png.abs8 (inline)
     3.10s  1.97% 76.23%      3.10s  1.97%  hash/adler32.update
     3.07s  1.95% 78.18%     23.67s 15.07%  image.(*NRGBA).At
     2.97s  1.89% 80.07%      2.97s  1.89%  image/color.RGBA.RGBA
     2.89s  1.84% 81.91%      5.86s  3.73%  image/color.(*RGBA).RGBA
     2.77s  1.76% 83.67%      4.39s  2.79%  image/png.filterPaeth
     2.76s  1.76% 85.43%     27.15s 17.28%  image/color.(*modelFunc).Convert

* ソースコード1の実行時間

 Duration: 2.85mins, Total samples = 157.11s (91.76%)
 Showing nodes accounting for 152.17s, 96.86% of 157.11s total
 Dropped 191 nodes (cum <= 0.79s)
      flat  flat%   sum%        cum   cum%
    23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter 👈
       16s 10.18% 24.88%        28s 17.82%  runtime.mallocgc
    12.89s  8.20% 33.09%     31.27s 19.90%  compress/flate.(*compressor).deflate
     9.85s  6.27% 39.35%      9.85s  6.27%  compress/flate.matchLen
     9.33s  5.94% 45.29%      9.33s  5.94%  runtime.memmove
     8.29s  5.28% 50.57%     43.39s 27.62%  runtime.convT2Inoptr
     5.59s  3.56% 54.13%      5.59s  3.56%  image/png.abs (inline)
     5.23s  3.33% 57.46%     34.02s 21.65%  image.(*NRGBA).Set
     5.04s  3.21% 60.66%     14.89s  9.48%  compress/flate.(*compressor).findMatch
     4.99s  3.18% 63.84%     76.50s 48.69%  main.ProcessImage
     4.53s  2.88% 66.72%      8.50s  5.41%  image/png.paeth
     4.38s  2.79% 69.51%      5.71s  3.63%  image.(*NRGBA).NRGBAAt
     3.85s  2.45% 71.96%     24.39s 15.52%  image/color.nrgbaModel
     3.60s  2.29% 74.25%      3.60s  2.29%  image/png.abs8 (inline)
     3.10s  1.97% 76.23%      3.10s  1.97%  hash/adler32.update
     3.07s  1.95% 78.18%     23.67s 15.07%  image.(*NRGBA).At
     2.97s  1.89% 80.07%      2.97s  1.89%  image/color.RGBA.RGBA
     2.89s  1.84% 81.91%      5.86s  3.73%  image/color.(*RGBA).RGBA
     2.77s  1.76% 83.67%      4.39s  2.79%  image/png.filterPaeth
     2.76s  1.76% 85.43%     27.15s 17.28%  image/color.(*modelFunc).Convert

* image/png.filter

画像の各行で以下の5種類のうちどのフィルタを使うべきか選択する

.image gocon2019_func_filter.png

- None
- Sub
- Up
- Average
- Paeth

* 注目しているピクセルの位置の値をフィルタを用いて計算する

.image gocon2019_filter_attention.png 402 600

* filter type: None

.image gocon2019_filter_none.png 402 600

* filter type: Sub

.image gocon2019_filter_sub1.png 402 600

* filter type: Sub

.image gocon2019_filter_sub2.png

* filter type: Up

.image gocon2019_filter_up1.png 402 600

* filter type: Up

.image gocon2019_filter_up2.png

* filter type: Average

.image gocon2019_filter_ave1.png 402 600

* filter type: Average

.image gocon2019_filter_ave2.png

* filter type: Paeth

.image gocon2019_filter_paeth1.png 402 600

* filter type: Paeth

.image gocon2019_filter_paeth2.png

* 行毎に最適なフィルタを選択する
- 行毎にフィルタ適用後の値の和をとる
- 値が最も小さくなるフィルタをその行の代表フィルタとする

.image gocon2019_select_filter.png

* フィルタの選択だけで全体の実行時間の約1/7を占める！

  flat  flat%   sum%        cum   cum%
  23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter 👈

* しかし、image/png.filter は API として使う場合は変更できない😭

  flat  flat%   sum%        cum   cum%
  23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter 👈

* ソースコード1の実行時間

 Duration: 2.85mins, Total samples = 157.11s (91.76%)
 Showing nodes accounting for 152.17s, 96.86% of 157.11s total
 Dropped 191 nodes (cum <= 0.79s)
      flat  flat%   sum%        cum   cum%
    23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter
       16s 10.18% 24.88%        28s 17.82%  runtime.mallocgc
    12.89s  8.20% 33.09%     31.27s 19.90%  compress/flate.(*compressor).deflate
     9.85s  6.27% 39.35%      9.85s  6.27%  compress/flate.matchLen
     9.33s  5.94% 45.29%      9.33s  5.94%  runtime.memmove
     8.29s  5.28% 50.57%     43.39s 27.62%  runtime.convT2Inoptr
     5.59s  3.56% 54.13%      5.59s  3.56%  image/png.abs (inline)
     5.23s  3.33% 57.46%     34.02s 21.65%  image.(*NRGBA).Set
     5.04s  3.21% 60.66%     14.89s  9.48%  compress/flate.(*compressor).findMatch
     4.99s  3.18% 63.84%     76.50s 48.69%  main.ProcessImage
     4.53s  2.88% 66.72%      8.50s  5.41%  image/png.paeth
     4.38s  2.79% 69.51%      5.71s  3.63%  image.(*NRGBA).NRGBAAt
     3.85s  2.45% 71.96%     24.39s 15.52%  image/color.nrgbaModel
     3.60s  2.29% 74.25%      3.60s  2.29%  image/png.abs8 (inline)
     3.10s  1.97% 76.23%      3.10s  1.97%  hash/adler32.update
     3.07s  1.95% 78.18%     23.67s 15.07%  image.(*NRGBA).At
     2.97s  1.89% 80.07%      2.97s  1.89%  image/color.RGBA.RGBA
     2.89s  1.84% 81.91%      5.86s  3.73%  image/color.(*RGBA).RGBA
     2.77s  1.76% 83.67%      4.39s  2.79%  image/png.filterPaeth
     2.76s  1.76% 85.43%     27.15s 17.28%  image/color.(*modelFunc).Convert

* ソースコード1の実行時間

 Duration: 2.85mins, Total samples = 157.11s (91.76%)
 Showing nodes accounting for 152.17s, 96.86% of 157.11s total
 Dropped 191 nodes (cum <= 0.79s)
      flat  flat%   sum%        cum   cum%
    23.09s 14.70% 14.70%     35.19s 22.40%  image/png.filter
       16s 10.18% 24.88%        28s 17.82%  runtime.mallocgc 👈
    12.89s  8.20% 33.09%     31.27s 19.90%  compress/flate.(*compressor).deflate
     9.85s  6.27% 39.35%      9.85s  6.27%  compress/flate.matchLen
     9.33s  5.94% 45.29%      9.33s  5.94%  runtime.memmove 👈
     8.29s  5.28% 50.57%     43.39s 27.62%  runtime.convT2Inoptr
     5.59s  3.56% 54.13%      5.59s  3.56%  image/png.abs (inline)
     5.23s  3.33% 57.46%     34.02s 21.65%  image.(*NRGBA).Set
     5.04s  3.21% 60.66%     14.89s  9.48%  compress/flate.(*compressor).findMatch
     4.99s  3.18% 63.84%     76.50s 48.69%  main.ProcessImage
     4.53s  2.88% 66.72%      8.50s  5.41%  image/png.paeth
     4.38s  2.79% 69.51%      5.71s  3.63%  image.(*NRGBA).NRGBAAt
     3.85s  2.45% 71.96%     24.39s 15.52%  image/color.nrgbaModel
     3.60s  2.29% 74.25%      3.60s  2.29%  image/png.abs8 (inline)
     3.10s  1.97% 76.23%      3.10s  1.97%  hash/adler32.update
     3.07s  1.95% 78.18%     23.67s 15.07%  image.(*NRGBA).At
     2.97s  1.89% 80.07%      2.97s  1.89%  image/color.RGBA.RGBA
     2.89s  1.84% 81.91%      5.86s  3.73%  image/color.(*RGBA).RGBA
     2.77s  1.76% 83.67%      4.39s  2.79%  image/png.filterPaeth
     2.76s  1.76% 85.43%     27.15s 17.28%  image/color.(*modelFunc).Convert

* runtime.mallocgc, runtime.memmove
メモリを管理する関数群がボトルネックになっている🤔

* ソースコード1: たたき台

image.Image は内部の Pix にスライスとして画素値を持っている
👉 Pix に直接アクセスすればいいじゃない！

.code first.go

* ソースコード2: スライスへ直接アクセス

.code second.go

* ソースコード2の実行時間

- メモリ管理系関数がボトルネックではなくなった
- 実行時間: 171sec → 87sec（約2倍の高速化）

 Duration: 1.45mins, Total samples = 79.99s (91.86%)
 Showing nodes accounting for 78.52s, 98.16% of 79.99s total
 Dropped 120 nodes (cum <= 0.40s)
      flat  flat%   sum%        cum   cum%
    22.43s 28.04% 28.04%     34.80s 43.51%  image/png.filter
    12.10s 15.13% 43.17%     30.80s 38.50%  compress/flate.(*compressor).deflate
    10.79s 13.49% 56.66%     10.79s 13.49%  compress/flate.matchLen
     5.98s  7.48% 64.13%      5.98s  7.48%  image/png.abs (inline)
     4.73s  5.91% 70.05%     15.52s 19.40%  compress/flate.(*compressor).findMatch
     4.33s  5.41% 75.46%      8.63s 10.79%  image/png.paeth
     3.74s  4.68% 80.14%      3.74s  4.68%  image/png.abs8 (inline)
     2.94s  3.68% 83.81%      2.94s  3.68%  hash/adler32.update
     2.20s  2.75% 86.56%      3.88s  4.85%  image/png.filterPaeth
     1.53s  1.91% 88.47%      1.53s  1.91%  main.ProcessSlice
     1.46s  1.83% 90.30%      1.46s  1.83%  compress/flate.hash4 (inline)
     1.43s  1.79% 92.09%     10.60s 13.25%  image/png.(*decoder).readImagePass
     1.42s  1.78% 93.86%      1.42s  1.78%  runtime.memmove

* ソースコード2の実行時間

 Duration: 1.45mins, Total samples = 79.99s (91.86%)
 Showing nodes accounting for 78.52s, 98.16% of 79.99s total
 Dropped 120 nodes (cum <= 0.40s)
      flat  flat%   sum%        cum   cum%
    22.43s 28.04% 28.04%     34.80s 43.51%  image/png.filter
    12.10s 15.13% 43.17%     30.80s 38.50%  compress/flate.(*compressor).deflate 👈
    10.79s 13.49% 56.66%     10.79s 13.49%  compress/flate.matchLen 👈
     5.98s  7.48% 64.13%      5.98s  7.48%  image/png.abs (inline)
     4.73s  5.91% 70.05%     15.52s 19.40%  compress/flate.(*compressor).findMatch 👈
     4.33s  5.41% 75.46%      8.63s 10.79%  image/png.paeth
     3.74s  4.68% 80.14%      3.74s  4.68%  image/png.abs8 (inline)
     2.94s  3.68% 83.81%      2.94s  3.68%  hash/adler32.update
     2.20s  2.75% 86.56%      3.88s  4.85%  image/png.filterPaeth
     1.53s  1.91% 88.47%      1.53s  1.91%  main.ProcessSlice
     1.46s  1.83% 90.30%      1.46s  1.83%  compress/flate.hash4 (inline) 👈
     1.43s  1.79% 92.09%     10.60s 13.25%  image/png.(*decoder).readImagePass
     1.42s  1.78% 93.86%      1.42s  1.78%  runtime.memmove
* ソースコード3: 

.code third.go

* ソースコード3:

 Duration: 1.21mins, Total samples = 66.07s (90.69%)
 Showing nodes accounting for 63.40s, 95.96% of 66.07s total
 Dropped 136 nodes (cum <= 0.33s)
      flat  flat%   sum%        cum   cum%
    25.85s 39.13% 39.13%     39.38s 59.60%  image/png.filter
     6.39s  9.67% 48.80%      6.39s  9.67%  image/png.abs (inline)
     5.06s  7.66% 56.46%      9.73s 14.73%  image/png.paeth
     3.80s  5.75% 62.21%      3.80s  5.75%  image/png.abs8 (inline)
     3.55s  5.37% 67.58%      3.55s  5.37%  hash/adler32.update
     2.75s  4.16% 71.74%      4.47s  6.77%  image/png.filterPaeth
     2.53s  3.83% 75.57%      2.53s  3.83%  compress/flate.(*deflateFast).matchLen
     1.95s  2.95% 78.52%      1.95s  2.95%  runtime.memmove
     1.84s  2.78% 81.31%      1.84s  2.78%  main.ProcessSlice
     1.64s  2.48% 83.79%     12.30s 18.62%  image/png.(*decoder).readImagePass
     1.39s  2.10% 85.89%      1.72s  2.60%  compress/flate.(*huffmanEncoder).bitCounts
     0.99s  1.50% 87.39%      1.34s  2.03%  compress/flate.(*decompressor).huffSym
     0.73s  1.10% 88.50%      3.43s  5.19%  compress/flate.(*decompressor).huffmanBlock
     0.66s     1% 89.50%      3.59s  5.43%  compress/flate.(*deflateFast).encode

* まとめ
● image/png パッケージは適切に使おう
● 推測するな、計測せよ

- 早すぎる最適化は諸悪の根源である, Donald E. Knuth, 1974
● Goへのコントリビュートは意外と簡単にできる！
